//퀵 정렬 변형
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 15
#define LIMIT 7
#define SWAP(x,y,t) ((t) = (x), (x) = (y), (y) = (t))


void insertion_sort(int list[], int n)
{
    int i, j, save;
    for(i = 1; i<n; i++)
    {
        save = list[i];
        for(j = i - 1; j>=0 && list[j]>save; j--)
            list[j + 1] = list[j];
        list[j + 1] = save;
    }
}
int partition(int list[], int left, int right, int k)
{
    int pivot, temp, low, high;
    pivot = list[k];
    SWAP(list[k], list[right], temp);
    
    low = left - 1;
    high = right;
    
    do
    {
        do
            low++;
        while(list[low] < pivot);
        
        do
            high--;
        while(list[high] > pivot);
        
        if(low < high)
            SWAP(list[low], list[high], temp);
    }while (low < high);
    SWAP(list[low], list[right], temp);
    return low;
}

void rquick_sort(int list[], int left, int right)
{
    if(right - left >= LIMIT)
    {   
        int k = right - left;
        int m = partition(list, left, right, k);
        rquick_sort(list, left, m - 1);
        rquick_sort(list, m + 1, right);
    }
}

void quick_sort(int list[], int n)
{
    rquick_sort(list, 0, n - 1);
    insertion_sort(list, n);
}

int main()
{
    int list[MAX_SIZE];
    srand(time(NULL));
    for(int i =0; i < MAX_SIZE; i++)
        list[i] = rand() % 100;
    for(int i =0; i < MAX_SIZE; i++)
        printf("[%d]", list[i]);
    printf("\n\n");
    
    quick_sort(list ,MAX_SIZE);
    for(int i =0; i < MAX_SIZE; i++)
        printf("[%d]", list[i]);
}
