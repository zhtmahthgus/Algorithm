//힙 삭제(removeMin)
->루트키를 삭제
1. 루트 키를 마지막 노드 키로 대체
2. 마지막 노드와 그의 자식들을 외부노드로 축소(reduceExternal)
3. 힙순서 재정렬(downHeap)
void downHeap(HeapType *h)
{
    int temp = h->heap[1];
    int parent = 1, child = 2;
    while(child <= h->heap_size)
    {
        if(child < h->heap_size && h->heap[child] > h->heap[child + 1])//오른쪽 자식 노드가 있을 때
            child++;
        if(temp <= h->heap[child])
            break;
        h->heap[parent] = h->heap[child];
        parent = child;
        child *= 2;
    }
    h->heap[parent] = temp;
}
int removeMin(HeapType *h)
{
    int key = h->heap[1];
    h->heap[1] = h->heap[h->heap_size];
    h->heap_size -= 1;
    downHeap(h);
    return key;
}
//힙 정렬(heap sort)
void heapSort(HeapType *h, int list[])
{
    HeapType heap;
    init(&heap);
    for(int i = 1; i <= h->heap_size; i++)
    {
        heap.heap[i] = h->heap[i];//포인터가 아니므로 도트 연산자 접근
        heap.heap_size++;
    }
    for(int i = 1; i<= h->heap_size; i++)
        list[i] = removeMin(&heap);
}
void printArray(int list[], int n)
{
    for(int i = 1; i <= n; i++)
        printf("[%d] ", list[i]);
    printf("\n");
}
int main()
{
    HeapType heap;
    int list[MAX_ELEMENT] = {0};
    init(&heap);
    insertItem(&heap, 5);
    insertItem(&heap, 3);
    insertItem(&heap, 7);
    insertItem(&heap, 4);
    insertItem(&heap, 1);
    insertItem(&heap, 4);
    insertItem(&heap, 8);
    insertItem(&heap, 2);
    printHeap(&heap);
    printf("deleted key: %d\n", removeMin(&heap));
    printHeap(&heap);
    heapSort(&heap, list);
    printArray(list, heap.heap_size);
    printHeap(&heap);
}