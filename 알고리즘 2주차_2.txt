//기초데이터구조
//배열
-순차 기억장소에 할당된 유한 개수의 동일 자료형 데이터원소들
-배열명:V
-배열크기:N
-배열첨자:i(index), 시작(0또는LowerBound), 끝(N-1또는UpperBound)
-배열원소:V[i]
-배열표시:V[LB..UB]
-각 셀은 베이스로부터 오프셋만큼 떨어지게 된다
V[LB..UB]의 base로부터 V[k]의 오프셋:k-LB
다차원배열
-배열크기:각 차원 크기의 곱
-배열첨자:i1,i2,...,in, 시작(0,0,..0또는LB1,LB2,...,LBn), 끝(N1-1,N2-1,...Nn-1또는UB1,UB2,...UBn)
-배열원소:V[i1,i2,...,in]
-배열표시:V[LB1..UB1,LB2..UB2,...,LBn..UBn]
-(2차원 배열)V[LB1..UB1,LB2..UB2]의 base로부터 V[k1,k2]의 오프셋:[(k1-LB1)(UB2-LB2+1)]+k2-LB2
-(3차원 배열)V[LB1..UB1,LB2..UB2,LB3..UB3]의 base로부터 V[k1,k2,k3]의 오프셋:[(k1-LB1)(UB2-LB2+1)(UB3-LB3-1)]+(k2-LB2)(UB3-LB3+1)+k3-LB3
//연결리스트
-동적메모리에 할당된, 링크(포인터)에 의해 연결된 유한 개수의 데이터원소 노드들
-연결리스트명:L
-연결리스트크기:n
-노드:한 개의 데이터원소를 저장하기 위해 동적 메모리에 할당된 메모리
-동적 할당과 해제는 실행시간에 system call에 의해 처리(getnode(),prenode(i))
단일연결리스트
-연속 노드로 구성, 가장 단순한 연결 데이터 구조
-노드 저장내용: 원소, 링크(다음 노드의 주소, 다음 노드 없는 경우 널링크 저장)
-접근점: 헤드노드의 주소 (그 외 헤드 포인터, 헤더 노드 등)
이중연결리스트
-추가 링크를 사용하여 역방향 순회도 가능
-노드 저장내용: 원소, 다음 노드 주소 링크, 이전 노드 주소 링크
-접근점: 헤드노드의 주소, 테일노드의 주소
원형연결리스트
-마지막 노드의 링크가 헤드노드의 주소
-접근점: 헤드노드의 주소
헤더와 트레일러
문제3-1 행렬 지그재그 채우기
Alg zigzag(A,n)
input matrix A[nxn]
output A[nxn]

1.value <- 1 {initialize}
2.for i<- 0 to n-1
   if(i%2==0)
    for j<-0 to n-1
     A[i,j]<-value
     value <-value+1
   else
    for j<-n-1 down to 0
    A[i,j]<-value
    value<-value+1
c코드
#include <stdio.h>
#include <stdlib.h>

#define SIZE 5

void zigzag(int A[][SIZE])
{
    int value =1;
    for(int i=0; i<SIZE; i++)
    {
        if(i%2==0)
            for(int j=0; j<SIZE; j++)
            {
                A[i][j] = value;
                value++;
            }
        else
            for(int j=SIZE-1; j>=0; j--)
            {
                A[i][j] = value;
                value++;
            }
    }
}
void printArray(int A[][SIZE])
{
    for(int i=0; i<SIZE; i++)
    {
        for(int j=0; j<SIZE; j++)
            printf("%2d",A[i][j]);
        printf("\n");
    }
}
int main()
{
    int A[SIZE][SIZE] = {0};
    zigzag(A);
    printArray(A);
}
문제 3-2 나선형 채우기(※문제 풀어보기!)
Alg spiral(A,n,m)
1.left<-0, right <-m-1
2.top<-0, bottom<-n-1
3.value<-1
4.while(left<=right&top<=bottom)
   for j<-left to right
    A[top][j] <- value
    value<- value+1
   top<-top+1
   if(top<=bottom)
    for i<-top to bottom
     A[i,right]<-value
     value<-value+1
   right<-right-1
   if(left<=right)
    for j<-left to right
     A[bottom, 수식] <- value
     value <- value +1
   다시 올라가는 코드
