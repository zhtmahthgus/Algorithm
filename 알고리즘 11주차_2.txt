//응용문제 비활성화 방식
#include <stdio.h>
#include <stdlib.h>

#define M 13

typedef struct
{
    int key;
    int probeCount;
    int state;
}Bucket;

typedef struct
{
    Bucket A[M];
}HashType;

void initHash(HashType* HT)
{
    for(int i = 0; i < M; i++)
    {
        HT->A[i].key = 0;
        HT->A[i].probeCount = 0;
        HT->A[i].state = 0;
    }
}

int h(int key)
{
    return key % M;
}

int h2(int key)
{
    return 11 - (key % 11);
}

int getNextBucketLinear(int v, int i)
{ 
    return (v + i) % M;
}

int getNextBucketQuadratic(int v, int i)
{
    return (v + i * i) % M;
}

int getNextBucketDouble(int v, int i, int key)
{
    return (v + i * h2(key)) % M;
}

int isEmpty(HashType* HT, int b)
{
    return HT->A[b].key == 0;
}

void insertItem(HashType* HT, int key)
{
    int v = h(key);
    int i = 0;
    int count = 0;
    while(i < M)
    {
        count ++;
        int b = getNextBucketLinear(v, i);
        if(isEmpty(HT, b)|| HT->A[b].state == 2)
        {
            HT->A[b].key = key;
            HT->A[b].probeCount = count;
            HT->A[b].state = 1;
            return;
        }
        else
            i++;
    }
}

int removeItem(HashType* HT, int key)
{
    int v = h(key);
    int i = 0;
    while(i < M)
    {
        int b = getNextBucketLinear(v, i);
        if(isEmpty(HT, b))
            return 0;
        else if(HT->A[b].state == 1&&HT->A[b].key == key)
        {
            HT->A[b].key = 0;
            HT->A[b].probeCount = 0;
            HT->A[b].state = 2;
            return key;
        }
        else
            i++;
    }
    return 0;
}


int findItem(HashType* HT, int key)
{
    int v = h(key);
    int i = 0;
    while(i < M)
    {
        int b = getNextBucketLinear(v, i);
        if(isEmpty(HT, b))
            return 0;
        else if(HT->A[b].state == 1&&HT->A[b].key == key)
            return key;
        else
            i++;
    }
    return 0;
}

void printHashTable(HashType* HT)
{
    for(int i = 0; i < M; i++)
        printf("HT[%02d] : %2d %d %d \n", i, HT->A[i].key, HT->A[i].probeCount, HT->A[i].state);
}

int main()
{
    HashType HT;
    initHash(&HT);
    
    insertItem(&HT, 25);
    insertItem(&HT, 13);
    insertItem(&HT, 16);
    insertItem(&HT, 15);
    insertItem(&HT, 7);
    insertItem(&HT, 28);
    insertItem(&HT, 31);
    insertItem(&HT, 20);
    insertItem(&HT, 1);
    insertItem(&HT, 38);
    printHashTable(&HT);
    if(findItem(&HT, 20))
        printf("존재");
    else
        printf("존재하지 않음");
        
    removeItem(&HT, 20);
    printHashTable(&HT);
    return 0;
}
//간선리스트 구현1
#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    char vName;
}Vertex;

typedef struct{
    int eNo;
    int weight;
    Vertex v1, v2;
}Edge;

typedef struct
{
    Vertex v[10];
    Edge e[30];
    int vCount;
    int eCount;
}Graph;

void init(Graph* G)
{
    G->vCount = 0;
    G->eCount = 0;
}

void makeVertex(Graph* G)
{
    G->v[G->vCount].vName = 97+G->vCount;
    G->vCount++;
}

void insertEdge(Graph* G, int w, Vertex v1, Vertex v2)
{
    G->e[G->eCount].eNo = G->eCount;
    G->e[G->eCount].weight = w;
    G->e[G->eCount].v1 = v1;
    G->e[G->eCount].v2 = v2;
    G->eCount++;
}

int main()
{
    Graph G;
    init(&G);
    for(int i = 0; i < 6; i++)
        makeVertex(&G);
    insertEdge(&G, 1, G.v[0], G.v[1]);
    for(int i = 0; i<G.vCount; i++)
        printf("[%c]", G.v[i].vName);
    for(int i = 0; i<G.eCount; i++)
        printf("[%d : %c - %c - %d]", G.e[i].eNo, G.e[i].v1.vName, G.e[i].v2.vName, G.e[i].weight);
        printf("\n");
}
//리스트 구현2
#include <stdio.h>
#include <stdlib.h>

#define N 10

typedef struct Vertex
{
    int no; //정점 이름
    int weight; //가중치
    struct Vertex* next; //인접정점
}Vertex;

typedef struct
{
    int vCount;
    Vertex* v[N];
}Graph;

void init(Graph* G)
{
    G->vCount = 0;
    for (int i = 0; i < N; i++)
        G->v[i] = NULL;
}

void makeVertex(Graph* G)
{
    G->vCount++;
}

void insertEdge(Graph* G, int w, int v1, int v2)
{
    Vertex* p = (Vertex*)malloc(sizeof(Vertex));
    p->weight = w;
    p->no = v1 + 1;
    p->next = G->v[v2];
    G->v[v2] = p;
    
    Vertex* q = (Vertex*)malloc(sizeof(Vertex));
    q->weight = w;
    q->no = v2 + 1;
    q->next = G->v[v1];
    G->v[v1] = q;
}

void print(Graph* G)
{
    for(int i = 0; i < G->vCount; i++)
    {
        Vertex* v = G->v[i];
        printf("V[%d] : ", i + 1);
        while(v != NULL)
        {
            printf("[%d (%d)]", v->no, v->weight);
            v = v->next;
        }
        printf("\n");
    }
}

void process(Graph* G, int num)
{
    Vertex* p = G->v[num];
    while(p!=NULL)
    {
        printf("[%d (%d)]", p->no, p->weight);
        p = p->next;
    }
    printf("\n");
}

void process2(Graph* G, int v1, int v2, int w)
{
    Vertex* p = G->v[v1];
    while(p!=NULL)
    {
        if(p->no == v2)
        {
            p->weight = w;
            return;
        }
        else
            p = p->next;
    }
}

int main()
{
    Graph G;
    init(&G);
    for (int i = 0; i < 6; i++)
        makeVertex(&G);
        
    insertEdge(&G, 1, 0, 1);
    print(&G);
}