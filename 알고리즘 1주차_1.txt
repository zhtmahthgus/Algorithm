실행시간
- 알고리즘의 running time은 대체로 input size에 비례
- worst case running time에 집중
- 시간 구하기 : 실험적 방법(알고리즘 구현 프로그램 작성, 시스템콜 사용, 결과 도표 작성)/이론적 방법(모든 입력 가능성 고려, HW,SW와 무관하게 알고리즘 속도 평가 가능)
알고리즘의 정의와 조건(단계적 절차의 명세서)
-입력(모호하지 않고 잘 정의된 0개 이상의 입력)
-출력(명확하게 정의된 1개 이상의 출력)
-명확성(모호하지 않고 명확한 명령어)
-유한성(반드시 정료, 무한루프X)
-유효성(명령어들 현재 실행가능한 연산)
알고리즘의 기술 방법
-1.자연어
-2.흐름도(FlowChart)
-3.의사코드(pseudo-code)
-4.프로그래밍 언어(C,Python)
의사코드
-알고리즘을 설명하기 위한 고급언어
-exp:수식, var:변수, arg:매개변수,인자값, ...:임의의 명령문, [x]: x가 선택사항, x|y|z:택일, x*:반복가능(0번 이상)
임의접근기계
-random access machine
원시작업
-알고리즘에 의해 수행되는 기본적인 계산
-프로그래밍 언어와 대체로 무관
-의사코드로 표현
-EXP,ASS,IND,CAL,RET 등
-원시작업 수 세기(n에 대한 함수 형태로 표현)
실행시간 추정
-worst case
Big-Oh 표기법
- O(n)
-함수 증가율의 상한(Upper)
-O(g(n)) = {f(n)|충분히 큰 모든 n에 대하여 f(n)<=g(n)인 양의 상수 c가 존재한다}
-f(n)이 차수d의 다항식일 때 f(n)=O(n^d)
