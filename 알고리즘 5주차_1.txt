//힙(heap): 완전 이진트리
//힙으로 우선순위 큐 구현
-> 전제: 적정 이진트리로 구현
->마지막 노드의 위치를 관리
//힙에 삽입 (insertItem)
1. 마지막노드 위치 찾기(advanceLast)
2. 마지막 노드 오른쪽에 삽입할 노드 삽입(expandExternal)
3. 힙 순서로 재정렬(Upheap)
#include <stdio.h>
#include <stdlib.h>

#define MAX_ELEMENT 100
typedef struct
{
    int heap[MAX_ELEMENT];
    int heap_size;
}HeapType;
void init(HeapType *h)
{
    h->heap_size = 0;
}
void upHeap(HeapType *h)
{
    int i = h->heap_size;
    int key = h->heap[i];
    while(i != 1 && key < h->heap[i/2])
    {
        h->heap[i] = h->heap[i/2];
        i /= 2;
    }
    h->heap[i] = key;
}
void insertItem(HeapType *h, int key)
{
    h->heap_size += 1;
    h->heap[h->heap_size] = key;
    upHeap(h);
}
void printHeap(HeapType *h)
{
    for(int i = 1; i <= h->heap_size; i++)
        printf("[%d] ", h->heap[i]);
    printf("\n");
}
int main()
{
    HeapType heap;
    init(&heap);
    insertItem(&heap, 5);
    insertItem(&heap, 3);
    insertItem(&heap, 7);
    insertItem(&heap, 4);
    insertItem(&heap, 1);
    insertItem(&heap, 4);
    insertItem(&heap, 8);
    insertItem(&heap, 2);
    printHeap(&heap);
}
