//에어텔
#include <stdio.h>
#include <stdlib.h>

#define max(x,y) ((x) > (y) ? (x) : (y))
#define min(x,y) ((x) < (y) ? (x) : (y))

int A[] = { 0, 1, 3, 6, 11, 17 };
int H[] = { 0, 2, 5, 1, 5, 0 };
int m[10];
//동적 프로그래밍
int airtel(int n)
{
    m[0] = 0;
     int cost;
    for (int d = 1; d < n; d++)
    {
        m[d] = 10000;
         for (int k = 0; k < d; k++)
         {
            cost = m[k] + H[k] + A[d - k];
            m[d] = min(m[d], cost);
        }
    }
    return m[n - 1];
}
//동적 프로그래밍 역방향
int reverseairtel(int n)
{
    m[n - 1] = 0;
    int cost;
    for (int d = n - 2; d >= 0; d--)
    {
        m[d] = 10000;
         for (int k = d + 1; k < n; k++)
         {
            cost = m[k] + H[k] + A[k - d];
            m[d] = min(m[d], cost);
        }
    }
    return m[0];
}
//분할 통치
int rAirtelForward(int d)
{
    if (d == 0)
        return 0;
    int minCost = 10000;
    int cost;
    
    for(int k = 0; k < d; k++)
    {
        cost = rAirtelForward(k) + H[k] + A[d - k];
        minCost = min(minCost, cost);
    }
    
    return minCost;
}

//분할 통치 역방향
int rAirtelBackward(int s)
{
    if (s == 5)
        return 0;
    int minCost = 10000;
    int cost;
    for(int k = s + 1; k < 6; k++)
    {
        cost = rAirtelBackward(k) + H[k] + A[k - s];
        minCost = min(minCost, cost);
    }
    
    return minCost;
}

int main()
{
    printf("%d\n", rAirtelForward(5));
    printf("%d\n", airtel(6));
    return 0;
}

//금화 강도
#include <stdio.h>
#include <stdlib.h>

#define max(x,y) ((x) > (y) ? (x) : (y))
#define min(x,y) ((x) < (y) ? (x) : (y))

int m[8][8];
int A[8][8] =
{
    {1,3,7,2,11,17,16,25},
    {6,2,3,4,7,2,12,15},
    {11,4,6,8,8,1,9,14},
    {20,8,8,11,6,3,3,9},
    {0,10,9,8,7,15,17,22},
    {17,12,7,10,3,1,8,13},
    {19,25,10,15,14,11,3,3},
    {21,18,16,20,15,13,19,0}
};

int minGold(int n)
{
    m[0][0] = A[0][0];
    int i, j ,k;
    int minRight, minDown;
    int cost;
    
    for(i = 0; i < n; i++)
    {
        for(j = 0; j < n; j++)
        {
            if (i == 0 && j ==0)
                continue;
            minRight = 10000;
            for (k = j - 1; k >= 0; k--)
            {
                cost = m[i][k] + A[i][j];
                minRight = min(minRight, cost);
            }
            minDown = 10000;
            for (k = i - 1; k >= 0; k--)
            {
                cost = m[k][j] + A[i][j];
                minDown = min(minDown, cost);
            }
            
            m[i][j] = min(minRight, minDown);
        }
    }
    return m[n-1][n-1];
}
int main()
{
   for(int i = 0; i < 8; i++)
   {
       for(int j = 0; j < 8; j++)
            printf("[%02d] ", A[i][j]);
        printf("\n");
   }
   minGold(8);
   printf("\n");
   for(int i = 0; i < 8; i++)
   {
       for(int j = 0; j < 8; j++)
            printf("[%02d] ", m[i][j]);
        printf("\n");
   }
   return 0;
}