//리스트 배열 구현
#include <stdio.h>
#include <stdlib.h>

#define SIZE 100

typedef struct
{
    int V[SIZE];
    int n;
}ArrayList;

void init(ArrayList* L)
{
    L->n = 0;
}

void traverse(ArrayList* L)
{
    for(int i=0; i<L->n; i++)
        printf("[%d] ",L->V[i]);
    printf("\n");
}

void add(ArrayList* L, int pos, int item)
{
    if(L->n == SIZE)
    {
        printf("fullListException/n");
        exit(1);
    }
    //invalidPosException......0<=pos<=L->n
    for(int i = L->n-1; i>=pos; i--)
        L->V[i+1] = L->V[i];
    L->V[pos] = item;
    L->n++;
}

int remove1(ArrayList* L, int pos)
{
    //exception
    
    int item = L->V[pos];
    for(int i = pos + 1; i<=L->n - 1; i++)
        L->V[i - 1] = L->V[i];
    L->n--;
    return item;
}
void main()
{
    ArrayList list;
    
    init(&list);
    
    add(&list, 0, 10); traverse(&list);
    add(&list, 1, 20); traverse(&list);
    add(&list, 2, 30); traverse(&list);
    
    getchar();
    remove1(&list,1); traverse(&list);
}
//리스트 단순연결리스트 구현
#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode
{
    int data;
    struct ListNode* link;
}ListNode;

typedef struct
{
    ListNode* head;
}LinkedListType;

void init(LinkedListType* L)
{
    L->head = NULL;
}

void addFirst(LinkedListType* L, int item)
{
    ListNode* node = (ListNode*)malloc(sizeof(ListNode));//getNode
    node->data = item;
    node->link = L->head;
    L->head = node;
}

void addLast(LinkedListType* L, int item)
{
    ListNode* node = (ListNode*)malloc(sizeof(ListNode));
    node->data = item;
    node->link = NULL;
    if (L->head == NULL)
        L->head = node;
    else
    {
        ListNode* before = L->head;
        while (before->link != NULL)
            before = before->link;
        before->link = node;
    }
}

void add(LinkedListType* L, int pos, int item)
{
   ListNode* node = (ListNode*)malloc(sizeof(ListNode));
   ListNode* before = L->head;
   for(int i=0; i<pos- 1; i++)
        before=before->link;
    node->data = item;
    node->link = before->link;
    before->link = node;
    
}

void remove1(LinkedListType* L, int pos)
{
    ListNode* before = L->head;
    for(int i=1; i<pos; i++)
        before = before->link;
    ListNode* p = before->link;
    before->link=p->link;
    free(p);
    
}

void removeFirst(LinkedListType* L)
{
    if (L->head == NULL)
    {
        printf("Exception");
        return;
    }
    else
    {
        ListNode* p = L->head;
        L->head = p -> link;
        free(p);
    }
}

void removeLast(LinkedListType* L)
{
    if (L->head == NULL)
    {
        printf("Exception");
        return;
    }
    if(L->head->link == NULL) {
        free(L->head);
        L->head = NULL;
        return;
    }else
    {
        ListNode* before = L->head;
        while (before->link->link != NULL)
            before = before->link;
        ListNode* p = before->link;
        before->link = NULL;
        free(p);
    }
}

int get(LinkedListType* L, int pos)
{
    ListNode* p = L->head;
    for(int i=1; i<pos; i++)
        p = p->link;
    return p->data;
}

void set(LinkedListType* L, int pos, int item)
{
    ListNode* p = L->head;
    for(int i=1; i<pos; i++)
        p = p->link;
   p->data = item;
}


void printList(LinkedListType* L)
{
    for(ListNode* p= L->head; p != NULL; p=p->link)
        printf("[%d] -> ", p->data);
    printf("Null\n");
}


void main()
{
    LinkedListType list;
    init(&list);
    
    addFirst(&list, 10); printList(&list);
    addFirst(&list, 20); printList(&list);
    
    add(&list, 1, 30); printList(&list);
    add(&list, 3, 40); printList(&list);
    
    printf("%d\n",get(&list, 2));
    
    addLast(&list, 50); printList(&list);
    
    remove1(&list, 2); printList(&list);
    removeFirst(&list); printList(&list);
    removeLast(&list); printList(&list);
    
}
//큐 연결리스트 구현
#include <stdio.h>
#include <stdlib.h>

typedef struct QueueNode
{
    int data;
    struct QueueNode* link;
}QueueNode;

typedef struct
{
    QueueNode* front;
    QueueNode* rear;
}LinkedQueue;

void init(LinkedQueue* queue)
{
    queue->front=queue->rear=NULL;
}

int is_empty(LinkedQueue* queue)
{
    return queue->front == NULL;
}

void enqueue(LinkedQueue* queue, int data)
{
    QueueNode* temp = (QueueNode*)malloc(sizeof(QueueNode));
    temp->data = data;
    temp->link=NULL;
    if(is_empty(queue))
    {
        queue->front=temp;
        queue->rear=temp;
    }
    else
    {
        queue->rear->link = temp;
        queue -> rear = temp;
    }
}

int dequeue(LinkedQueue* queue)
{
    QueueNode* temp = queue->front;
    int data;
    if(is_empty(queue))
    {
        fprintf(stderr, "Queue is empty\n");
        exit(1);
    }
    else
    {
        data = temp->data;
        queue->front = temp->link;
        if(queue->front == NULL)
            queue->rear = NULL;
        free(temp);
        return data;
    }
    
}

void print_queue(LinkedQueue* queue)
{
    QueueNode* p;
    for(p=queue->front; p!=NULL; p=p->link)
        printf("[%d] -> ", p->data);
    printf("[NULL]\n");
}

void main()
{
    LinkedQueue queue;
    init(&queue);
    
    enqueue(&queue, 10); print_queue(&queue);
    enqueue(&queue, 20); print_queue(&queue);
    enqueue(&queue, 30); print_queue(&queue);
    
    printf("%d\n",dequeue(&queue)); print_queue(&queue);
}