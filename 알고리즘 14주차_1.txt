//부분집합
#include <stdio.h>
#include <stdlib.h>

#define N 100

int weight[N], value[N], cap;
int maxSet[N], maxSetSize = 0, maxValue = 0;

void eval_knapsack(int arr[], int setSize)
{
    int currWeight = 0, currValue = 0;
    for (int i = 0; i < setSize; i++)
    {
        currWeight += weight[arr[i]];
        currValue += value[arr[i]];
    }
    if(currWeight > cap)
        return;
    if(currValue > maxValue)
    {
        maxValue = currValue;
        maxSetSize = setSize;
        for(int i = 0; i < setSize; i++)
            maxSet[i] = arr[i];
    }
}

void subset(int arr[], int setSize, int n, int idx)
{
    if(idx == n)
    {
        printArr(arr, setSize);
        return;
    }
    arr[setSize] = idx;
    subset(arr, setSize + 1, n, idx + 1);
    subset(arr, setSize, n, idx + 1);
}
//2^n승 시간
void subset_knapsack(int arr[], int setSize, int n, int idx)
{
    if(idx == n)
    {
        eval_knapsack(arr, setSize);
        return;
    }
    arr[setSize] = idx;
    
    subset_knapsack(arr, setSize + 1, n, idx + 1);
    subset_knapsack(arr, setSize, n, idx + 1);
}

void printArr(int arr[], int n)
{
    for(int i = 0; i < n; i++)
        printf("[%d]", arr[i]);
    printf("\n");
}

int main()
{
    int arr[N], n;
    scanf("%d %d", &n, &cap);
    
    for(int i = 0; i < n; i++)
        scanf("%d", &value[i]);
    for(int i = 0; i < n; i++)
        scanf("%d", &weight[i]);
    
    subset_knapsack(arr, 0, n, 0);
    
    printf("Max Value: %d\n", maxValue);
    printArr(maxSet, maxSetSize);
}

//수의 합(NP)
#include <stdio.h>
#include <stdlib.h>

int c[15][150];

void calculate_subset_sum(int s[], int n, int m)
{
    int i, j;
    
    for(i = 0; i <= n; i++)
        c[i][0] = 1;
        
    for(i = 1; i <= m; i++)
        c[0][i] = 0;
        
    for(i = 1; i <= n; i++)
    {
        for(j = 1; j <= m; j++)
        {
            c[i][j] = 0;
            
            if(j >= s[i - 1])
                if(c[i - 1][j - s[i - 1]] == 1)
                    c[i][j] = 1;
            if(c[i -  1][j] == 1)
                c[i][j] = 1;
        }
    }
}

int main()
{
    int m, n;
    printf("input m, n: ");
    scanf("%d %d", &m, &n);
    int* s = (int*)malloc(sizeof(int) * n);
    for(int i = 0; i < n; i++)
        scanf("%d", &s[i]);
    
    calculate_subset_sum(s, n, m);
    
    if(c[n][m] == 1)
        printf("possible\n");
}

