//제자리 정렬
#include <stdio.h>
#include <stdlib.h>

#define MAX_ELEMENT 100
typedef struct
{
    int heap[MAX_ELEMENT];
    int heap_size;
}HeapType;
void init(HeapType *h)
{
    h->heap_size = 0;
}
void upHeap(HeapType *h)
{
    int i = h->heap_size;
    int key = h->heap[i];
    while(i != 1 && key < h->heap[i/2])
    {
        h->heap[i] = h->heap[i/2];
        i /= 2;
    }
    h->heap[i] = key;
}
void insertItem(HeapType *h, int key)
{
    h->heap_size += 1;
    h->heap[h->heap_size] = key;
    upHeap(h);
}
void downHeap(HeapType *h)
{
    int temp = h->heap[1];
    int parent = 1, child = 2;
    while(child <= h->heap_size)
    {
        if(child < h->heap_size && h->heap[child] > h->heap[child + 1])//오른쪽 자식 노드가 있을 때
            child++;
        if(temp <= h->heap[child])
            break;
        h->heap[parent] = h->heap[child];
        parent = child;
        child *= 2;
    }
    h->heap[parent] = temp;
}
int removeMin(HeapType *h)
{
    int key = h->heap[1];
    h->heap[1] = h->heap[h->heap_size];
    h->heap_size -= 1;
    downHeap(h);
    return key;
}
void printHeap(HeapType *h)
{
    for(int i = 1; i <= h->heap_size; i++)
        printf("[%d] ", h->heap[i]);
    printf("\n");
}
void inPlaceHeapSort(HeapType* h)
{
    int size = h->heap_size;
    int key;
    for(int i = 0; i<size;i++)
    {
        key=removeMin(h);
        h->heap[h->heap_size + 1] = key;
    }
}
int main()
{
    HeapType heap;
    int list[MAX_ELEMENT] = {0};
    srand(time(NULL));
    init(&heap);
    for(int i =0; i<15; i++)
    {
        insertItem(&heap, rand() % 100);
    }
    printHeap(&heap);
    inPlaceHeapSort(&heap);
    for(int i = 1; heap.heap[i] > 0 ; i++)
    {
        printf("[%d] ", heap.heap[i]);
    }
}
//상향식 힙생성
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_ELEMENT 100

struct Heap
{
    int H[MAX_ELEMENT];
    int n;
}_Heap;

void buildHeap()
{
    for(int i = _Heap.n/2; i>=1; i--)
    {
        downHeap(i);
    }
}
void rBuildHeap(int i)
{
    if(i > _Heap.n)
        return;
    if(i*2 <= _Heap.n)
        rBuildHeap(2*i);
    if(i*2 + 1 <= _Heap.n)
        rBuildHeap(2*i + 1);
    downHeap(i);
}
void downHeap(int i)
{
    if(i*2 > _Heap.n) return;
    if(_Heap.H[i] < _Heap.H[i*2] || _Heap.H[i] < _Heap.H[i*2 + 1])
    {
        if(_Heap.H[i*2]>_Heap.H[i*2 + 1])
        {
            int temp;
            temp = _Heap.H[i];
            _Heap.H[i] = _Heap.H[i*2];
            _Heap.H[i*2] = temp;
            downHeap(i*2);
        }
        else
        {
            int temp;
            temp = _Heap.H[i];
            _Heap.H[i] = _Heap.H[i*2 + 1];
            _Heap.H[i*2 + 1] = temp;
            downHeap(i*2 + 1);
        }
    }
    else
    {
        return;
    }
}
int removeMax()
{
    int key = _Heap.H[1];
    _Heap.H[1] = _Heap.H[_Heap.n--];
    downHeap(1);
    return key;
}
void inPlaceHeapSort()
{
    int size = _Heap.n;
    int key;
    for(int i =0; i < size; i++)
    {
        key = removeMax();
        _Heap.H[_Heap.n + 1] = key;
    }
}
void printHeap()
{
    for(int i = 1; i<=_Heap.n; i++)
        printf("[%d] ", _Heap.H[i]);
    printf("\n");
}
void printArray()
{
    for(int i = 1; _Heap.H[i] > 0; i++)
        printf("[%d] ", _Heap.H[i]);
    printf("\n");
}
void main()
{
  _Heap.n = 0;
  srand(time(NULL));
  printf("입력할 원소의 개수:");
  scanf("%d", &_Heap.n);
  for(int i = 1; i <= _Heap.n; i++)
  {
      _Heap.H[i] = rand() % 100;
  }
  //buildHeap();
  rBuildHeap(1);
  printHeap();
  inPlaceHeapSort();
  printArray();
}
//힙의 마지막 노드
#include <stdio.h> 
#include <stdlib.h> 
#define MAX_ELEMENT 100

typedef struct {
	int data[MAX_ELEMENT];
	int top;
} StackType;

typedef struct
{
    int heap[MAX_ELEMENT];
    int heap_size;
}HeapType;
//Stack
void init_Stack(StackType *s)
{
	s->top = -1;
}

int is_Empty(StackType *s)
{
	return (s->top == -1);
}

void push(StackType *s, int item)
{
    s->data[++(s->top)] = item;
}

int pop(StackType *s)
{
	if (is_Empty(s)) {
		exit(1);
	}
	else return s->data[(s->top)--];
}
//Heap
void init_Heap(HeapType *h)
{
    h->heap_size = 0;
}

void upHeap(HeapType *h)
{
    int i = h->heap_size;
    int key = h->heap[i];
    while(i != 1 && key < h->heap[i/2])
    {
        h->heap[i] = h->heap[i/2];
        i /= 2;
    }
    h->heap[i] = key;
}

void insertItem(HeapType *h, int key)
{
    h->heap_size += 1;
    h->heap[h->heap_size] = key;
    upHeap(h);
}

void binaryExpansion(StackType *s, int i)
{
    while(i>=2)
    {
        push(s, i%2);
        i /= 2;
    }
    push(s, i);
}

int findLastNode(HeapType *h, int n)
{
    StackType s;
	init_Stack(&s);
	binaryExpansion(&s, n);
	pop(&s);
	int bit = 0;
	int i = 1;
	int v = h->heap[i];
	while(!is_Empty(&s))
	{
	    bit = pop(&s);
	    if(bit == 0)
	    {
	        v = h->heap[i*2];
	        i = i*2;
	    }
	    else
	    {
	        v = h->heap[i*2 + 1];
	        i = i*2 + 1;
	    }
	            
	}
	return v;
}

void printHeap(HeapType *h)
{
    for(int i = 1; i <= h->heap_size; i++)
        printf("[%d] ", h->heap[i]);
    printf("\n");
}

int main(void)
{
    HeapType h;
    init_Heap(&h);
    insertItem(&h, 2);
    insertItem(&h, 6);
    insertItem(&h, 4);
    insertItem(&h, 14);
    insertItem(&h, 7);
    insertItem(&h, 12);
    insertItem(&h, 8);
    insertItem(&h, 17);
    insertItem(&h, 15);
    insertItem(&h, 9);
    printHeap(&h);
    printf("%d", findLastNode(&h, 10));
}
