//재귀
동전 중에서 가짜 동전 하나 찾기
1. 2개씩 : 반복문, 비재귀적
2. 문제를 분할: 분할 정복, 재귀적
재귀 알고리즘
-자신을 사용하여 정의된 알고리즘
-재귀 케이스: 차후의 재귀호출은 작아진 부문제들을 대상으로 이루어진다
-베이스 케이스: 부문제들이 충분히 작아지면, 알고리즘은 재귀를 사용하지 않고 이들을 직접 해결한다
작동 원리
-보류된 재귀호출을 위한 변수들에 관련된 저장/복구는 컴퓨터에 의해 자동적으로 수행
기본 규칙
-1.베이스케이스를 항상 가져야 하며, 이는 재귀 없이 해결될 수 있어야 한다
-2.재귀호출은 항상 베이스케이스를 향하는 방향으로 진행되어야 한다
-3.모든 재귀호출이 정상적으로 작동한다고 가정해야 한다
-4.꼭 필요할 때만 사용되어야 한다.(저장/복구가 성능↓)
나쁜 재귀(잘못 설계된 재귀)
-베이스 케이스가 없거나 도달 불능
-재귀 케이스가 베이스케이스를 형해 작아진 부문제를 향해 도달하지 않음
응용문제: 재귀적 곱하기와 나누기
곱하기
{base case}: if(b=1)
	    return a
{recursion}:  else 
	    return a+product(a,b-1)
나누기 몫
{base case}: if(a<b)
	    return 0
{recursion}:  else 
	    return 1 + quotient(a-b,b) 
나누기 나머지
{base case}: if(a<b)
	    return a 
{recursion}:  else 
	    return modulo(a-b,b) 
응용문제: 하노이탑(이중재귀)
{base case}:if(n=1)
 	  write("move from", from, "to", to)
	  return
{recursion}:rHanoi(n-1, from,to,aux)
	 write("move from",from,"to",to)
{recursion}:rHanoi(n-1,aux,from,to)
	  return
자릿수 출력 c코드
#include <stdio.h>
#include <stdlib.h>
void rprintDigits(int n)
{
    if(n<10)
        printf("%d\n",n);
    else
    {
        rprintDigits(n/10);
        printf("%d\n",n%10);
    }
}
void printDigits()
{
    int n;
    printf("Enter a number:" );
    scanf("%d", &n);
    if(n<0)
        printf("Negative!\n");
    else
        rprintDigits(n);
}
int main()
{
    printDigits();
}
하노이탑 c코드
#include <stdio.h>
#include <stdlib.h>
void rHanoi(int n, char from, char aux, char to)
{
    if(n==1)
        printf("Disk %d : Move from %c to %c\n", n, from, to);
    else
    {
        rHanoi(n-1, from, to, aux);
        printf("Disk %d : Move from %c to %c\n", n, from, to);
        rHanoi(n-1, aux, from, to);
    }
}
int main()
{
    rHanoi(4,'A','B','C');
}
거듭제곱 c코드
#include <stdio.h>
#include <stdlib.h>
int iter_power(int x, int n)
{
    int result = 1;
    for(int i=0; i<n; i++)
        result *=x;
    return result;
}//반복문
int recur_power(int x, int n)
{
    if(n==0)
        return 1;
    else if((n%2)==0)
        return recur_power(x * x, n / 2);
    else
        return x * recur_power(x * x, (n-1)/2);
}//재귀
int main()
{
    printf("2^10=%d\n",iter_power(2,10));
    printf("2^10=%d\n",recur_power(2,10));
}