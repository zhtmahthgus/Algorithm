//배열의 두 수 덧셈
#include <stdio.h>
#include <stdlib.h>

#define SIZE 8

typedef struct
{
    int elem;
    int idx;
}Dict;
void sort(Dict D[])
{
    int elem, i, j, idx;
    for(i = 1; i < SIZE; i++)
    {
        elem = D[i].elem;
        idx = D[i].idx;
        for(j = i - 1; j >= 0 && D[j].elem > elem; j--)
        {
            D[j + 1].elem = D[j].elem;
            D[j + 1].idx = D[j].idx;
        }
        D[j + 1].elem = elem;
        D[j + 1].idx = idx;
    }
}
int findElement(Dict D[], int elem, int low, int high)
{
    int middle;
    while(low <= high)
    {
        middle = (low + high) / 2;
        if(elem == D[middle].elem)
            return middle;
        else if(elem < D[middle].elem)
            high = middle - 1;
        else
            low = middle + 1;
    }
    return -1;
}
void findIndexPair(Dict D[], int A[], int s)
{
    int j;
    for(int i = 0; i < SIZE; i++)
    {
        int v = s - A[i];
        j = findElement(D, v, 0, SIZE - 1);
        if(j != -1)
        {
            printf("(%d,%d)",A[i],D[j].elem);
        }
    }
}
void buildDict(Dict D[], int A[])
{
    for(int i = 0; i < SIZE; i++)
    {
        D[i].elem = A[i];
        D[i].idx = i;
    }
    sort(D);
}
int main()
{
    int A[SIZE] = {2, 21, 8, 3, 5, 1, 13, 1};
    Dict D[SIZE];
    
    buildDict(D, A);
    for(int i = 0; i < SIZE; i++)
        printf("(%d, %d)", D[i].elem, D[i].idx);
    printf("\n");
    findIndexPair(D, A, 22);
    return 0;
}
//두 개의 사전에서 k번째 작은 키
//사전
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 4

typedef struct
{
    int key;
    char value[10];
}element;

typedef struct
{
    element dict[SIZE];
    int size;
}DictType;

void init(DictType* d)
{
    d->size = 0;
}
void insetKey(DictType* d)
{
    for(int i = 0; i< SIZE; i++)
    {
        d->dict[i].key = rand() % 30 + 1;
        for(int j = 0; j < i; j++)
            if(d->dict[i].key == d->dict[j].key)
                i--;
    }
}
void insetValue(DictType* d)
{
    for(int i = 0; i< SIZE; i++)
    {
        for(int j = 0; j<5; j++)
            d->dict[i].value[j] = rand() % 26 + 97;
        d->size++;
    }
}
void insertion_sort(DictType* d)
{
    int i, j;
    element item;
    for(i = 1; i<SIZE; i++)
    {
        item = d->dict[i];
        for(j = i - 1; j>=0 && d->dict[j].key > item.key; j--)
            d->dict[j + 1] = d->dict[j];
            d->dict[j + 1] = item;
    }
}
void makeDict(DictType* d)
{
    insetKey(d);
    insetValue(d);
    insertion_sort(d);
}
int rFindElement(DictType* ds, DictType* dt ,int k, int ls, int rs, int lt, int rt)
{
    int ms;
    int mt;
    int sl;
    int tl;
    if(ls > rs)
        return dt->dict[lt + k - 1].key;
    if(lt > rt)
        return ds->dict[ls + k - 1].key;
    ms = (ls + rs) / 2;
    mt = (lt + rt) / 2;
    sl = ms - ls + 1;
    tl = mt - lt + 1;
    if(k == sl + tl)
        if(ds->dict[ms].key<dt->dict[mt].key)
            return rFindElement(ds, dt, k - sl, ms + 1, rs, lt, mt);
        else
            return rFindElement(ds, dt, k - tl, ls, ms, mt + 1, rt);
    else if(k < sl + tl)
        if(ds->dict[ms].key<dt->dict[mt].key)
            return rFindElement(ds, dt, k, ls, rs, lt, mt - 1);
        else
            return rFindElement(ds, dt, k, ls, ms - 1, lt, rt);
    else
        if(ds->dict[ms].key<dt->dict[mt].key)
            return rFindElement(ds, dt, k - sl, ms + 1, rs, lt, rt);
        else
            return rFindElement(ds, dt, k - tl, ls, rs, mt + 1, rt);
    
}//재귀적

void printDict(DictType* d)
{
    printf("key value \n==========\n");
    for(int i = 0; i < d->size; i++)
    {
        printf("%2d ", d->dict[i].key);
        for(int j = 0; j < 5; j++)
            printf("%c", d->dict[i].value[j]);
        printf("\n");
    }
}
int main()
{
    DictType d1;
    DictType d2;
    init(&d1);
    init(&d2);
    srand(time(NULL));
    makeDict(&d1);
    makeDict(&d2);
    printDict(&d1);
    printDict(&d2);
    int i = rFindElement(&d1, &d2, 3, 0, 3, 0, 3);
    printf("%d", i);

}