//선택 & 삽입 정렬
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 15
#define SWAP(x,y,t) ((t) = (x), (x) = (y), (y) = (t))

void selection_sort(int list[], int n)
{
    int least, temp;
    for(int i=0; i< n - 1; i++)
    {
        least = i;
        for(int j=i + 1; j<n; j++)
            if(list[j] < list[least])
                least = j;
        SWAP(list[i], list[least], temp);
    }
}

void insertion_sort(int list[], int n)
{
    int i, j, save;
    for(i = 1; i<n; i++)
    {
        save = list[i];
        for(j = i - 1; j>=0 && list[j]>save; j--)
            list[j + 1] = list[j];
        list[j + 1] = save;
    }
}

void main()
{
    int list[MAX_SIZE];
    srand(time(NULL));
    
    for(int i = 0; i< MAX_SIZE; i++)
    {
        list[i] = rand() % 100;
        for(int j=0; j<i; j++)
            if(list[i] == list[j])
                i--;
    }
    
    for(int i = 0; i< MAX_SIZE; i++)
        printf("%d ", list[i]);
    printf("\n");
        
    //selection_sort(list, MAX_SIZE);
    insertion_sort(list, MAX_SIZE);
    
     for(int i = 0; i< MAX_SIZE; i++)
        printf("%d ", list[i]);
}

//버블 정렬
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SWAP(x,y,t) ((t) = (x), (x) = (y), (y) = (t))

void bubble_sort(int list[], int n)
{
    int temp;
    printf("정렬할 원소: ");
    for(int t=0; t<n; t++)
        printf("%d ", list[t]);
    printf("\n<<버블정렬 수행>>");
    
    for(int i=n - 1; i>0; i--)
    {
        printf("\n%d 단계>>", n-i);
        for(int j=0; j<i; j++)
            if(list[j] > list[j + 1])
                SWAP(list[j], list[j + 1], temp);
        for(int t=0; t<n; t++)
        printf("%3d ", list[t]);
    }
}

void main()
{
    int list[6] = {8, 7, 5, 3, 2, 1};
    
    bubble_sort(list, 6);
}

//쉘 정렬
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 15
#define SWAP(x,y,t) ((t) = (x), (x) = (y), (y) = (t))

void inc_insertion_sort(int list[], int first, int last, int gap)
{
    int i, j, save;
    for(i = first + gap; i<=last; i=i+gap)
    {
        save = list[i];
        for(j = i - gap; j>=first && list[j]>save; j=j-gap)
            list[j + gap] = list[j];
        list[j + gap] = save;
    }
}

void shell_sort(int list[], int n)
{
    int i, gap;
    for(gap = n/2; gap>0; gap = gap/2)
    {
        if(gap%2==0)
            gap++;
        for(i = 0; i< gap; i++)
            inc_insertion_sort(list, i, n-1, gap);
    }
}

void main()
{
    int list[MAX_SIZE];
    srand(time(NULL));
    
    for(int i = 0; i< MAX_SIZE; i++)
    {
        list[i] = rand() % 100;
        for(int j=0; j<i; j++)
            if(list[i] == list[j])
                i--;
    }
    
    for(int i = 0; i< MAX_SIZE; i++)
        printf("%d ", list[i]);
    printf("\n");
        
    shell_sort(list, MAX_SIZE);
    
     for(int i = 0; i< MAX_SIZE; i++)
        printf("%d ", list[i]);

}